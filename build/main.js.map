{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { Solexa2Controller } from \"./Solexa2Controller\";\n\nimport { BasicInfoData } from \"./model/BasicInfoData\";\nimport { ChannelInfoData } from \"./model/ChannelInfoData\";\nimport { ChannelMeasurementData } from \"./model/ChannelMeasurementData\";\nimport { WeatherStationMeasurementData } from \"./model/WeatherStationMeasurementData\";\n\n\nconst INFO = \"info\";\nconst INFO_ERROR_MODE = \"errorMode\";\nconst INFO_LEARN_MODE = \"learnMode\";\nconst INFO_WEATHER_STATION = \"weatherStation\";\nconst INFO_STATUS_BRIDGE = \"statusBridge\";\nconst INFO_NEW_PARAMETER = \"newParameter\";\nconst INFO_MAX_CHANNELS = \"maxChannels\";\nconst INFO_PROTOCOL_VERSION = \"protocolVersion\";\nconst WEATHER_STATION = \"weatherStation\";\nconst WEATHER_STATION_TEMPERATURE = \"temperature\";\nconst WEATHER_STATION_WIND_SPEED = \"windSpeed\";\nconst WEATHER_STATION_BRIGHTNESS = \"brightness\";\nconst WEATHER_STATION_RAIN = \"isRaining\";\nconst CHANNELS = \"channels\";\nconst CHANNEL_ID = \"id\";\nconst CHANNEL_FUNCTIONID = \"functionId\";\nconst CHANNEL_FUNCTIONNAME = \"functionName\";\nconst CHANNEL_NAME = \"name\";\nconst CHANNEL_READ_STATUS = \"readStatus\";\nconst CHANNEL_STATUS_FLAG = \"statusFlag\";\nconst CHANNEL_VALUE_1 = \"value1\";\nconst CHANNEL_VALUE_2 = \"value2\";\nconst CHANNEL_NEW_PARAMETER = \"newParameter\";\nconst CHANNEL_TEMPERATURE = \"temperature\";\n\nclass Solexa2 extends utils.Adapter {\n\n\tprivate solexa2Controller!: Solexa2Controller;\n\tprivate updateInterval: ioBroker.Interval | undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"solexa2\",\n\t\t});\n\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", true, true);\n\n\t\t// check configuration\n\t\tif (!this.config.serverIp) {\n\t\t\tthis.log.error(\"Server IP is empty - please check instance configuration\")\n\t\t\treturn;\n\t\t}\n\t\tif (!this.config.serverPort) {\n\t\t\tthis.log.error(\"Server port is empty - please check instance configuration\")\n\t\t\treturn;\n\t\t}\n\t\tif (!this.config.interval) {\n\t\t\tthis.log.error(\"Interval is empty - please check instance configuration\")\n\t\t\treturn;\n\t\t}\n\n\t\tthis.solexa2Controller = new Solexa2Controller(this);\n\t\tthis.solexa2Controller.connect(this.config.serverIp, this.config.serverPort, this.actionsAfterConnect.bind(this), this.actionsAfterReceivingData.bind(this));\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Reset the connection indicator during shutdown\n\t\t\tthis.setState(\"info.connection\", false, true);\n\n\t\t\tif (this.updateInterval){\n\t\t\t\tthis.clearInterval(this.updateInterval);\n\t\t\t}\n\n\t\t\tthis.solexa2Controller.disconnect();\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate actionsAfterConnect() : void {\n\n\t\tthis.createSolexaInfoObjects();\n\t\tthis.solexa2Controller.sendCommandGetBasicInfos();\n\n\t\tthis.updateInterval = this.setInterval(async () => {\n\t\t\tthis.log.info(\"fetchAllMeasurementData\");\n\t\t\tthis.solexa2Controller.fetchAllMeasurementData();\n\t\t}, this.config.interval * 1000);\n\t}\n\n\tprivate actionsAfterReceivingData(data: BasicInfoData | ChannelInfoData | ChannelMeasurementData | WeatherStationMeasurementData | undefined) : void {\n\n\t\tif (data instanceof BasicInfoData) {\n\n\t\t\tthis.saveBasicInfos(data);\n\n\t\t\tif (data.getWeatherStation()) {\n\t\t\t\tthis.createSolexaWeaterStationInfoObjects();\n\t\t\t}\n\n\t\t\t// for (let i = 0; i < data.getMaxChannels(); i++) {\n\t\t\t// \tthis.solexa2Controller.sendCommandGetChannel(i);\n\t\t\t// }\n\n\t\t\t// for (let i = 1; i < 10; i++) {\n\t\t\t// \tthis.solexa2Controller.sendCommandGetChannel(i);\n\t\t\t// }\n\n\t\t\t// for (let i = data.getMaxChannels(); i >= 0; i--) {\n\t\t\t// \tthis.solexa2Controller.sendCommandGetChannel(i);\n\t\t\t// }\n\n\t\t}\n\n\t\tif (data instanceof ChannelInfoData) {\n\n\t\t\tthis.saveChannelInfos(data);\n\t\t}\n\n\t\tif (data instanceof ChannelMeasurementData) {\n\n\t\t\tthis.saveChannelMeasurementData(data);\n\t\t}\n\n\t\tif (data instanceof WeatherStationMeasurementData) {\n\n\t\t\tthis.saveWeatherStationMeasurementData(data);\n\t\t}\n\t}\n\n\tprivate async createSolexaInfoObjects() : Promise<void> {\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_ERROR_MODE, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_ERROR_MODE,\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_LEARN_MODE, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_LEARN_MODE,\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_WEATHER_STATION, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_WEATHER_STATION,\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_STATUS_BRIDGE, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_STATUS_BRIDGE,\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_NEW_PARAMETER, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_NEW_PARAMETER,\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_MAX_CHANNELS, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_MAX_CHANNELS,\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(INFO+\".\"+INFO_PROTOCOL_VERSION, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: INFO_PROTOCOL_VERSION,\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t}\n\n\tprivate async createSolexaWeaterStationInfoObjects() : Promise<void> {\n\n\t\tthis.setObjectNotExistsAsync(WEATHER_STATION, {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Data of weather station\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(WEATHER_STATION +\".\"+WEATHER_STATION_TEMPERATURE, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Temparature\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"\u00B0C\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(WEATHER_STATION +\".\"+WEATHER_STATION_WIND_SPEED, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Wind speed\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"km/h\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(WEATHER_STATION +\".\"+WEATHER_STATION_BRIGHTNESS, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Brightness\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: \"lux\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(WEATHER_STATION +\".\"+WEATHER_STATION_RAIN, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Raining\",\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t}\n\n\tprivate async saveBasicInfos(data: BasicInfoData) : Promise<void> {\n\n\t\tconst errorMode : boolean = data.getErrorMode();\n\t\tconst learnMode : boolean = data.getLearnMode();\n\t\tconst weatherStation : boolean = data.getWeatherStation();\n\t\tconst statusBridge : number = data.getStatusBridge();\n\t\tconst newParameter : number = data.getNewParameter();\n\t\tconst maxChannels : number = data.getMaxChannels();\n\t\tconst protocolVersion : string = data.getProtocolVersion();\n\n\t\tthis.log.info(\"errorMode: \" + errorMode);\n\t\tthis.log.info(\"learnMode: \" + learnMode);\n\t\tthis.log.info(\"weatherStation: \" + weatherStation);\n\t\tthis.log.info(\"statusBridge: \" + statusBridge);\n\t\tthis.log.info(\"newParameter: \" + newParameter);\n\t\tthis.log.info(\"maxChannels: \" + maxChannels);\n\t\tthis.log.info(\"ProtocolVersion: \" + protocolVersion);\n\n\t\tthis.setState(INFO+\".\"+INFO_ERROR_MODE, errorMode, true);\n\t\tthis.setState(INFO+\".\"+INFO_LEARN_MODE, learnMode, true);\n\t\tthis.setState(INFO+\".\"+INFO_WEATHER_STATION, weatherStation, true);\n\t\tthis.setState(INFO+\".\"+INFO_STATUS_BRIDGE, statusBridge, true);\n\t\tthis.setState(INFO+\".\"+INFO_NEW_PARAMETER, newParameter, true);\n\t\tthis.setState(INFO+\".\"+INFO_MAX_CHANNELS, maxChannels, true);\n\t\tthis.setState(INFO+\".\"+INFO_PROTOCOL_VERSION, protocolVersion, true);\n\t}\n\n\tprivate async saveChannelInfos(data: ChannelInfoData) : Promise<void> {\n\n\t\tthis.log.info(\"Register Channel: \" + data.getId() + \" - \" + data.getName() + \" - \" + data.getFunctionId() + \" - \" + data.getFunctionName());\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS, {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Data of channels\"\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId(), {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Data of channel \" + data.getId()\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_ID, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"id\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_FUNCTIONID, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"function id\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_FUNCTIONNAME, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"function name\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_NAME, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"name\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_ID, data.getId(), true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_FUNCTIONID, data.getFunctionId(), true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_FUNCTIONNAME, data.getFunctionName(), true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_NAME, data.getName(), true);\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_READ_STATUS, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Read Status\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_STATUS_FLAG, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Status Flag\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_VALUE_1, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Value 2\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_VALUE_2, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"Value 2\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_NEW_PARAMETER, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"New Parameter\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\n\t\tif (data.hasTemperatureSensor()) {\n\n\t\t\tthis.setObjectNotExistsAsync(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_TEMPERATURE, {\n\t\t\t\ttype: \"state\",\n\t\t\t\tcommon: {\n\t\t\t\t\tname: \"Temperature\",\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\trole: \"indicator\",\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false\n\t\t\t\t},\n\t\t\t\tnative: {}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async saveChannelMeasurementData(data: ChannelMeasurementData) : Promise<void> {\n\n\t\tconst id  = data.getId();\n\t\tconst readStatus  = data.getReadStatus();\n\t\tconst statusFlag = data.getStatusFlag();\n\t\tconst value1  = data.getValue1();\n\t\tconst value2  = data.getValue2();\n\t\tconst newParameter = data.getNewParameter();\n\t\tconst temperature = data.getTemperature();\n\n\t\t// this.log.debug(\"channel number: \" + id);\n\t\t// this.log.debug(\"read status: \" + readStatus);\n\t\t// this.log.debug(\"status flag: \" + statusFlag);\n\t\t// this.log.debug(\"value 1: \" + value1);\n\t\t// this.log.debug(\"value 2: \" + value2);\n\t\t// this.log.debug(\"new parameter: \" + newParameter);\n\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_READ_STATUS, readStatus, true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_STATUS_FLAG, statusFlag, true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_VALUE_1, value1, true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_VALUE_2, value2, true);\n\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_NEW_PARAMETER, newParameter, true);\n\n\t\tif (data.isTemperatureValid()) {\n\t\t\t// this.log.debug(\"temperature: \" + temperature);\n\t\t\tthis.setState(CHANNELS+\".\"+data.getId()+\".\"+CHANNEL_TEMPERATURE, temperature, true);\n\t\t}\n\t}\n\n\tprivate async saveWeatherStationMeasurementData(data: WeatherStationMeasurementData) : Promise<void> {\n\n\t\tconst outdoorTemperature : number = data.getTemperature();\n\t\tconst windSpeed : number = data.getWindSpeed();\n\t\tconst isRaining : boolean =  data.getIsRaining();\n\t\tconst brightness : number = data.getBrightness();\n\n\t\tthis.log.info(\"New weather data: \"+ outdoorTemperature +\" \u00B0C - \"+windSpeed+\" km/h - isRaining \"+isRaining + \" - \"+brightness + \" lux\");\n\n\t\tthis.setState(WEATHER_STATION +\".\"+WEATHER_STATION_TEMPERATURE, outdoorTemperature, true);\n\t\tthis.setState(WEATHER_STATION +\".\"+WEATHER_STATION_WIND_SPEED, windSpeed, true);\n\t\tthis.setState(WEATHER_STATION +\".\"+WEATHER_STATION_BRIGHTNESS, brightness, true);\n\t\tthis.setState(WEATHER_STATION +\".\"+WEATHER_STATION_RAIN, isRaining, true);\n\t}\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Solexa2(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Solexa2())();\n}"],
  "mappings": "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",
  "names": []
}

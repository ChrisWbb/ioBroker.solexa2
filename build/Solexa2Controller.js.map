{
  "version": 3,
  "sources": ["../src/Solexa2Controller.ts"],
  "sourcesContent": ["import { AdapterInstance } from \"@iobroker/adapter-core\";\nimport { Socket, SocketConnectOpts } from \"net\";\nimport { TextDecoder } from \"util\";\n\nimport { BasicInfoData } from \"./model/BasicInfoData\";\nimport { ChannelInfoData } from \"./model/ChannelInfoData\";\nimport { ChannelMeasurementData } from \"./model/ChannelMeasurementData\";\nimport { WeatherStationMeasurementData } from \"./model/WeatherStationMeasurementData\";\n\n//import { Queue } from \"./util/Queue\";\nimport { Solexa2Message } from \"./Solexa2Message\";\n\n//let adapter: AdapterInstance;\n\nclass Solexa2Controller {\n\n\tprivate socket: Socket;\n\tprivate log: ioBroker.Logger;\n\tprivate basicInfoData: BasicInfoData | undefined;\n\tprivate channels: ChannelInfoData[];\n\tprivate openMeasurementIDs: number[];\n\tprivate reconnectCount: number;\n\n\t//private messageQueue : Queue<Solexa2Message>;\n\n\tconstructor(adapterInstance: AdapterInstance) {\n\t\tthis.socket = new Socket();\n\t\tthis.channels = [];\n\t\tthis.openMeasurementIDs = [];\n\t\tthis.log = adapterInstance.log;\n\n\t\tthis.reconnectCount = 0;\n\t}\n\n\n\tpublic async connect(ipAddress : string, port : number, callbackConnect: () => void, callbackData : (value : BasicInfoData | ChannelInfoData | ChannelMeasurementData | WeatherStationMeasurementData | undefined) => void) : Promise<void> {\n\n\t\tconst options: SocketConnectOpts = {\n\t\t\t\"host\": ipAddress,\n\t\t\t\"port\": port\n\t\t};\n\n\n\t\tthis.socket.on(\"connect\", () => {\n\t\t\tthis.log.info(\"Connected\");\n\t\t\tif (this.channels.length == 0) {\n\t\t\t\tcallbackConnect();\n\t\t\t} else {\n\t\t\t\tthis.reconnectCount++;\n\t\t\t}\n\t\t});\n\n\t\tthis.socket.on(\"data\", (data) => {\n\t\t\tthis.convertData(data, callbackData);\n\t\t});\n\n\t\tthis.socket.on(\"close\", () => {\n\t\t\tthis.log.info(\"Connection closed\");\n\t\t\tthis.socket.connect(options);\n\t\t});\n\n\t\tthis.socket.on(\"error\", (err) => {\n\t\t\tthis.log.error(\"Error: \"+ err);\n\t\t});\n\n\t\tthis.socket.connect(options);\n\t}\n\n\tpublic async disconnect() : Promise<void> {\n\t\tthis.socket.removeAllListeners();\n\t\tthis.socket.destroy();\n\t}\n\n\tprivate async convertData(data : Uint8Array, callbackData: (value: BasicInfoData | ChannelInfoData | ChannelMeasurementData | WeatherStationMeasurementData | undefined) => void) : Promise<void> {\n\n\t\tconst responseCode = data[2] & 255;\n\t\tthis.log.debug(\"responseCode: \"+responseCode + \" reconnect: \" + this.reconnectCount);\n\n\t\tif (responseCode != 212 ) {\n\t\t\tif (this.isCheckSumOK(data)) {\n\t\t\t\tswitch (responseCode) {\n\t\t\t\t\tcase 4 : {\n\t\t\t\t\t\tthis.readChannelValues(data, callbackData);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 204 : {\n\t\t\t\t\t\tthis.readBasicInfos(data, callbackData);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 205 : {\n\t\t\t\t\t\tthis.readChannelInfos(data, callbackData);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 207 : {\n\t\t\t\t\t\tthis.readChannelValues(data, callbackData);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//this.sendNextMessage();\n\t\t\t} else {\n\t\t\t\tthis.log.error(\"Checksum is not ok\");\n\t\t\t\t//this.resendMessage();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async fetchAllMeasurementData() : Promise<void> {\n\n\t\tthis.openMeasurementIDs = [];\n\n\t\tfor(let i = 0; i < this.channels.length; i++) {\n\t\t\tthis.openMeasurementIDs.push(this.channels[i].getId())\n\t\t}\n\n\t\tthis.fetchNextMeasurementData();\n\t}\n\n\tpublic async fetchNextMeasurementData() : Promise<void> {\n\n\t\tconst nextID = this.openMeasurementIDs.shift();\n\t\tif (nextID) {\n\t\t\tthis.sendCommandGetChannelValues(nextID);\n\t\t}\n\t}\n\n\tpublic sendCommandGetBasicInfos() : void {\n\t\tthis.log.info(\"called sendCommandGetBasicInfos\");\n\t\tthis.sendMessage(new Uint8Array([200]));\n\t}\n\n\tpublic sendCommandGetChannel(channelNum : number) : void {\n\t\tthis.log.info(\"called sendCommandGetChannel(\"+channelNum+\")\");\n\t\tthis.sendMessage(new Uint8Array([201,channelNum]));\n\t}\n\n\tpublic sendCommandGetChannelValues(channelNum : number) : void {\n\t\tthis.log.info(\"called sendCommandGetChannelValues(\"+channelNum+\")\");\n\t\tthis.sendMessage(new Uint8Array([130,channelNum]));\n\t}\n\n\tpublic sendCommandUp(channelNum : number) : void {\n\t\t//todo nummer pr\u00FCfen\n\t\tthis.sendMessage(new Uint8Array([117,channelNum]));\n\t}\n\n\tpublic sendCommandDown(channelNum : number) : void {\n\t\t//todo nummer pr\u00FCfen\n\t\tthis.sendMessage(new Uint8Array([100,channelNum]));\n\t}\n\n\tprivate sendMessage(byteArray: Uint8Array): void {\n\n\t\tconst message: Solexa2Message = new Solexa2Message(byteArray);\n\t\t//this.messageQueue.enqueue(message);\n\n\t\t//if (this.messageQueue.size() === 1) {\n\t\t//\tthis.sendFirstMessage();\n\t\t//}\n\t\tconst buffer = Buffer.from(message.getMessage());\n\t\tthis.socket.write(buffer);\n\t}\n\t/*\n\tprivate sendFirstMessage(): void {\n\n\t\tconst message = this.messageQueue.first();\n\t\tif (message instanceof Solexa2Message) {\n\t\t\tthis.logByteArray(message.getMessage(), \"sendFirstMessage\")\n\t\t\t//console.info(\"queue size: \"+this.messageQueue.size());\n\t\t\tconst buffer = Buffer.from(message.getMessage());\n\t\t\tthis.socket.write(buffer);\n\t\t}\n\t}\n\n\tprivate resendMessage(): void {\n\n\t\tthis.sendFirstMessage();\n\t}\n\n\n\tprivate sendNextMessage(): void {\n\t\tthis.messageQueue.dequeue();\n\t\tif (!this.messageQueue.isEmpty()) {\n\t\t\tthis.sendFirstMessage();\n\t\t}\n\t}\n*/\n\n\tprivate isCheckSumOK(byteArray: Uint8Array) : boolean {\n\t\tlet calculatedCheckSum  = 0;\n\t\tfor (let pos = 0; pos < byteArray.length - 2; pos++) {\n\t\t\tcalculatedCheckSum += byteArray[pos] & 255;\n\t\t}\n\t\tconst receivedCheckSum: number =\n          (byteArray[byteArray.length - 2] & 255) +\n          ((byteArray[byteArray.length - 1] & 255) << 8);\n\t\tif (receivedCheckSum !== calculatedCheckSum) {\n\t\t\tthis.log.error(\n\t\t\t\t`Error wrong checksum: ${receivedCheckSum} != ${calculatedCheckSum}`\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate logByteArray(byteArray: Uint8Array, message: string): void {\n\t\tlet str: string = message + \": \";\n\t\tfor (let pos = 0; pos < byteArray.length; pos++) {\n\t\t\tstr += byteArray[pos] + \" \";\n\t\t}\n\t\tconsole.info(str);\n\t}\n\n\tprivate readBasicInfos(uint8: Uint8Array, callbackData: (arg0: BasicInfoData) => void) : void {\n\n\t\tconst data : BasicInfoData = new BasicInfoData();\n\n\t\tdata.setErrorMode((uint8[3] & 255) == 1);\n\t\tdata.setLearnMode((uint8[4] & 255) == 1);\n\t\tdata.setWeatherStation((uint8[5] & 255) == 1);\n\t\tdata.setStatusBridge(uint8[6] & 255);\n\t\tdata.setNewParameter(uint8[7] & 255);\n\t\tdata.setMaxChannels(uint8[8] & 255);\n\t\tdata.setProtocolVersion((uint8[12] & 255) + \".\" + (uint8[11] & 255) + \".\" + (uint8[10] & 255) + \".\" + (uint8[9] & 255));\n\n\t\tcallbackData(data);\n\n\t\tthis.basicInfoData = data;\n\t\tthis.sendCommandGetChannel(1);\n\t}\n\n\tprivate readChannelInfos(uint8: Uint8Array, callbackData: (arg0: ChannelInfoData) => void) : void {\n\n\t\tconst data : ChannelInfoData = new ChannelInfoData();\n\n\t\tconst byteArrayName: Uint8Array = new Uint8Array(16);\n\t\tbyteArrayName.set(uint8.subarray(7, 23), 0);\n\t\tdata.setName(new TextDecoder(\"utf-8\").decode(byteArrayName).trim());\n\t\tdata.setId(uint8[3] & 255);\n\t\tdata.setFunctionId(uint8[4] & 255);\n\n\t\tthis.log.debug(\"readChannelInfos for channel: \"+data.getId());\n\n\t\tif (data.getFunctionId() ===  3 || data.getFunctionId() ==  46 || data.getFunctionId() ==  60) {\n\t\t\tthis.channels.push(data);\n\t\t\tcallbackData(data);\n\t\t}\n\n\t\tif (this.basicInfoData && data.getId() < this.basicInfoData.getMaxChannels()) {\n\t\t\tthis.sendCommandGetChannel(data.getId()+1);\n\t\t}\n\t}\n\n\tprivate readChannelValues(uint8: Uint8Array, callbackData: (arg0: ChannelMeasurementData | WeatherStationMeasurementData) => void) : void {\n\n\t\tconst data : ChannelMeasurementData = new ChannelMeasurementData();\n\n\t\tdata.setId(uint8[3] & 255);\n\t\tdata.setReadStatus(uint8[4] & 255);\n\t\tdata.setStatusFlag((uint8[5] & 255) + ((uint8[6] & 255) << 8) + ((uint8[7] & 255) << 16) + ((uint8[8] & 255) << 24));\n\t\tdata.setValue1(uint8[9] & 255);\n\t\tdata.setValue2(uint8[10] & 255);\n\t\tdata.setNewParameter(uint8[11] & 255);\n\n\t\t// if (uint8[21] == 66 && uint8.length > 27) {\n\t\t// \tdata.setTemperature(Buffer.from([uint8[22], uint8[23]]).readUIntLE(0, 2)/10.0);\n\t\t// }\n\n\t\tcallbackData(data);\n\n\t\tif (uint8[12] == 87) { // uint8[12] == 119 || uint8[12] == 115)  ???\n\n\t\t\tconst weatherData : WeatherStationMeasurementData = new WeatherStationMeasurementData();\n\n\t\t\tweatherData.setTemperature(Buffer.from([uint8[13], uint8[14]]).readUIntLE(0, 2)/10.0);\n\t\t\tweatherData.setWindSpeed(Buffer.from([uint8[15], uint8[16]]).readUIntLE(0, 2)/10.0);\n\t\t\tweatherData.setIsRaining(uint8[17] != 78);\n\t\t\tweatherData.setBrightness(Buffer.from([uint8[18], uint8[19], uint8[20],0]).readUIntLE(0, 4));\n\n\t\t\tcallbackData(weatherData);\n\t\t}\n\n\t\tthis.fetchNextMeasurementData();\n\t}\n\n}\n\nexport { Solexa2Controller };"],
  "mappings": "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",
  "names": []
}
